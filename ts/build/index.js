"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cpu_1 = __importDefault(require("./cpu"));
const flags_1 = require("./flags");
const memoryMapper_1 = __importDefault(require("./memoryMapper"));
const numberDisplay_1 = __importDefault(require("./numberDisplay"));
const programCounter8_1 = require("./programCounter8");
const programRom16_1 = __importDefault(require("./programRom16"));
const ram_1 = __importDefault(require("./ram"));
const registers_1 = require("./registers");
const screen_1 = __importDefault(require("./screen"));
const assembler_1 = require("./assembler/assembler");
const ramLength = 256;
const screenStart = 246;
const screenWidth = 32;
const screenHeigth = 32;
const numberDisplayStart = 252;
const romLength = 512;
const registersLength = 16;
let cpu;
let ram;
let rom;
let registers;
let flags;
let pc;
let numberDisplay;
let screen;
let memoryMapper;
rom = new programRom16_1.default(romLength);
registers = new registers_1.Registers(registersLength);
registers.setRegisterNames(['r0', 'r1', 'r2', 'r3', 'r4', 'r5,', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', 'r15']);
flags = new flags_1.Flags();
pc = new programCounter8_1.ProgramCounter8();
ram = new ram_1.default(ramLength);
screen = new screen_1.default(ram, screenStart, screenWidth, screenHeigth);
numberDisplay = new numberDisplay_1.default(ram, numberDisplayStart);
memoryMapper = new memoryMapper_1.default();
memoryMapper.map(ram, 0, screenStart - 1, false);
memoryMapper.map(screen, screenStart, screenStart + screen_1.default.nBytesAlocated - 1, true);
memoryMapper.map(numberDisplay, numberDisplayStart, numberDisplayStart + numberDisplay_1.default.nBytesAlocated - 1, true);
cpu = new cpu_1.default(memoryMapper, rom, registers, flags, pc);
const assembler = new assembler_1.Assembler('./src/assembler/assembly', './src/assembler/assembled');
assembler.assembleFiles();
